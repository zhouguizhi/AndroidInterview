给我说说ArrayList的扩容机制？
答案:
ArrayList是List接口的实现类，它是支持根据需要而动态增长的数组(因为ArrayList内部实现是使用了数组)。java中标准数组是定长的，
在数组被创建之 后，它们不能被加长或缩短。这就意味着在创建数组时需要知道数组的所需长度，但有时我们需要动态程序中获 取数组长度。
ArrayList就是为此而生的,但是它不是线程安全的，外ArrayList按照插入的顺序来存放数据 1ArrayList扩容发生在add()方法调用的时候，
 调用ensureCapacityInternal()来扩容的， 通过方法 calculateCapacity(elementData, minCapacity)获取需要扩容的长度:
  2ensureExplicitCapacity方法可以判断是 否需要扩容: 3ArrayList扩容的关键方法grow(): 
  获取到ArrayList中elementData数组的内存空间长度 扩容至原 来的1.5倍 
  4调用Arrays.copyOf方法将elementData数组指向新的内存空间时newCapacity的连续空间 
  从此方法 中我们可以清晰的看出其实ArrayList扩容的本质就是计算出新的扩容数组的size后实例化，
  并将原有数组内容复 制到新数组中去
  
  计算机常用术语: CRUD =====增加(Create)、检索(Retrieve)、更新(Update)和删除(Delete)
  
  
  一 、先从 ArrayList 的构造函数说起
  ArrayList有三种方式来初始化，构造方法源码如下:
  /**
  * 默认初始容量大小 */
   private static final int DEFAULT_CAPACITY = 10;
   private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};
  /** *默认构造函数，使用初始容量10构造一个空列表(无参数构造) */
   public ArrayList() {
       this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
  }
  /**
  * 带初始容量参数的构造函数。(用户自己指定容量) */
  public ArrayList(int initialCapacity) {
  if (initialCapacity > 0) {//初始容量大于0
  //创建initialCapacity大小的数组
  this.elementData = new Object[initialCapacity]; } else if (initialCapacity == 0) {//初始容量等于0
  //创建空数组
  this.elementData = EMPTY_ELEMENTDATA; } else {//初始容量小于0，抛出异常
           throw new IllegalArgumentException("Illegal Capacity: "+
                                              initialCapacity);
  } }
  /** *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回 *如果指定的集合为null，throws NullPointerException。
  */
    public ArrayList(Collection<? extends E> c) {
       elementData = c.toArray();
  细心的同学一定会发现 :以无参数构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当真正对数组进行 添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为10。 下面在我们分析 ArrayList 扩容 时会讲到这一点内容!
  二、一步一步分析 ArrayList 扩容机制 这里以无参构造函数创建的 ArrayList 为例分析
  1. 先来看 add 方法
  /**
  * 将指定的元素追加到此列表的末尾。 */
  public boolean add(E e) { //添加元素之前，先调用ensureCapacityInternal方法
  ensureCapacityInternal(size + 1); // Increments modCount!! //这里看到ArrayList添加元素的实质就相当于为数组赋值 elementData[size++] = e;
  return true;
      }
  12345678910
   注意 :JDK11 移除了 ensureCapacityInternal() 和 ensureExplicitCapacity() 方法 2. 再来看看 ensureCapacityInternal() 方法
  可以看到 add 方法 首先调用了 ensureCapacityInternal(size + 1)
  //得到最小扩容量
  private void ensureCapacityInternal(int minCapacity) {
  if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { // 获取默认的容量和传入参数的较大值
           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);
       }
       ensureExplicitCapacity(minCapacity);
   }
   当 要 add 进第1个元素时，minCapacity为1，在Math.max()方法比较后，minCapacity 为10。
   3. ensureExplicitCapacity() 方法
   如果调用 ensureCapacityInternal() 方法就一定会进过(执行)这个方法，下面我们来研究一下这个方法的源码!
   //判断是否需要扩容
   private void ensureExplicitCapacity(int minCapacity) {
   modCount++;
         // overflow-conscious code
         if (minCapacity - elementData.length > 0)
   }
   我们来仔细分析一下:
   当我们要 add 进第1个元素到 ArrayList 时，elementData.length 为0 (因为还是一个空的 list)，
   因为执行了 ensureCapacityInternal() 方法 ，所以 minCapacity 此时为10。此时， minCapacity -
   elementData.length > 0 成立，所以会进入 grow(minCapacity) 方法。
   当add第2个元素时，minCapacity 为2，此时e lementData.length(容量)在添加第一个元素后扩容成 10 了。此 时，
   minCapacity - elementData.length > 0 不成立，所以不会进入(执行)grow(minCapacity) 方法。 
   添加第3、4···到第10个元素时，依然不会执行grow方法，数组容量都为10
   直到添加第11个元素，minCapacity(为11)比elementData.length(为10)要大。进入grow方法进行扩容
   
   4. grow() 方法
   /**
   * 要分配的最大数组大小 */
       private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
   /**
   * ArrayList扩容的核心方法。 */
   private void grow(int minCapacity) {
   // oldCapacity为旧容量，newCapacity为新容量
   int oldCapacity = elementData.length;
   //将oldCapacity 右移一位，其效果相当于oldCapacity /2， //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，
   int newCapacity = oldCapacity + (oldCapacity >> 1); //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量， if (newCapacity - minCapacity < 0)
   newCapacity = minCapacity;
   // 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和
   MAX_ARRAY_SIZE， //如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为
   MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。 if (newCapacity - MAX_ARRAY_SIZE > 0)
               newCapacity = hugeCapacity(minCapacity);
           // minCapacity is usually close to size, so this is a win:
           elementData = Arrays.copyOf(elementData, newCapacity);
   }
   int newCapacity = oldCapacity + (oldCapacity >> 1),所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍左右
    (oldCapacity为偶数就是1.5倍，否则是1.5倍左右)! 奇偶不同，比如 :10+10/2 = 15, 33+33/2=49。如果是奇数的
     话会丢掉小数
    
     “>>”(移位运算符):>>1 右移一位相当于除2，右移n位相当于除以 2 的 n 次方。这里 oldCapacity 
     明显右移了1 位所以相当于oldCapacity /2。对于大数据的2进制运算,位移运算符比那些普通运算符的运算要快很多,
     因为程序仅 仅移动一下而已,不去计算,这样提高了效率,节省了资源
     我们再来通过例子探究一下 方法 :
     当add第1个元素时，oldCapacity 为0，经比较后第一个if判断成立，newCapacity = minCapacity(为10)。
     但是第 二个if判断不会成立，即newCapacity 不比 MAX_ARRAY_SIZE大，则不会进入 hugeCapacity 方法。
     数组容量为 10，add方法中 return true,size增为1。 当add第11个元素进入grow方法时，newCapacity为15，
     比minCapacity(为11)大，第一个if判断不成立。新容 量没有大于数组最大size，不会进入hugeCapacity方法。
     数组容量扩为15，add方法中return true,size增为11。 以此类推······
     
     这里补充一点比较重要，但是容易被忽视掉的知识点:
     java 中的 length 属性是针对数组说的,比如说你声明了一个数组,想知道这个数组的长度则用到了 length 这个属 性.
     java 中的 length() 方法是针对字符串说的,如果想看这个字符串的长度则用到 length() 这个方法.
     java 中的 size() 方法是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看!
     
     5. hugeCapacity() 方法。
     从上面 grow() 方法源码我们知道: 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) hugeCapacity() 方法来比较 
     minCapacity 和 MAX_ARRAY_SIZE，如果minCapacity大于最大容量，则新容量则为 Integer.MAX_VALUE ，
     否则，新 容量大小则为 MAX_ARRAY_SIZE 即为 Integer.MAX_VALUE - 8 
     private static int hugeCapacity(int minCapacity) {
         if (minCapacity < 0) // overflow
     throw new OutOfMemoryError(); //对minCapacity和MAX_ARRAY_SIZE进行比较 //若minCapacity大，将Integer.MAX_VALUE作为新数组的大小 //若MAX_ARRAY_SIZE大，将MAX_ARRAY_SIZE作为新数组的大小 //MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
         return (minCapacity > MAX_ARRAY_SIZE) ?
             Integer.MAX_VALUE :
             MAX_ARRAY_SIZE;
     }
     
     三、  System.arraycopy()和Arrays.copyof() 方法
     阅读源码的话，我们就会发现 ArrayList 中大量调用了这两个方法。比如:我们上面讲的扩容操作以及
     、toArray() 等方法中都用到了该方法!
     3.1 System.arraycopy() 方法
     /**
     * 在此列表中的指定位置插入指定的元素。
     *先调用 rangeCheckForAdd 对index进行界限检查;然后调用 ensureCapacityInternal 方法保证capacity足
     够大; *再将从index开始之后的所有成员后移一个位置;将element插入index位置;最后size加1。 */
         public void add(int index, E element) {
             rangeCheckForAdd(index);
     )(fOypoc.syarrA )(ypocyarra.metsyS
     )(worg
     我们写一个简单的方法测试以下:
     public class ArraycopyTest {
         public static void main(String[] args) {
             // TODO Auto-generated method stub
             int[] a = new int[10];
             a[0] = 0;
             a[1] = 1;
             a[2] = 2;
             a[3] = 3;
             System.arraycopy(a, 2, a, 3, 3);
             a[2]=99;
             for (int i = 0; i < a.length; i++) {
                 System.out.print(a[i] + " ");
     } }
     }
     结果:
     0 1 99 2 3 0 0 0 0 0
     3.2 Arrays.copyOf() 方法
     /**
     以正确的顺序返回一个包含此列表中所有元素的数组(从第一个到最后一个元素); 返回的数组的运行时类型是指定数组的
     运行时类型。
     */
     public Object[] toArray() { //elementData:要复制的数组;size:要复制的长度
             return Arrays.copyOf(elementData, size);
         }
     个人觉得使用 Arrays.copyOf() 方法主要是为了给原有数组扩容，测试代码如下:
     ensureCapacityInternal(size + 1); // Increments modCount!! //arraycopy()方法实现数组自己复制自己 //elementData:源数组;index:源数组中的起始位置;elementData:目标数组;index + 1:目标数组中的起始
     位置; size - index:要复制的数组元素的数量;
     System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element;
     size++;
     }
     
     我们写一个简单的方法测试以下:
     